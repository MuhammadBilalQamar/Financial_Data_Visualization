{"version":3,"sources":["Components/footer.js","utils/functions.js","Components/Dropdown.js","Components/barChart.js","Components/fileUploader.js","Components/singleLineChart.js","Components/layout.js","App.js","serviceWorker.js","index.js"],"names":["FooterPage","color","className","fluid","Date","getFullYear","href","target","getMonthName","element","label","DropDownSelections","onChange","options","value","useState","selectedOption","setSelectedOption","event","map","option","index","key","BarChart","state","selectedLabel","dataBar","barChartOptions","responsive","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","display","yAxes","ticks","beginAtZero","formatData","objects","tempData","Object","hasOwnProperty","call","console","log","length","total","calculateSum","push","arr","reduce","accumulator","object","Number","handleChange","updateBarChart","groupByDate","data","groups","item","date","split","a","months","DATA","dataSets","setState","labels","datasets","backgroundColor","borderWidth","borderColor","fileData","this","props","error","style","paddingBottom","legend","height","marginRight","React","Component","MyDropzone","getFileData","onDrop","useCallback","acceptedFiles","myFile","reader","FileReader","addEventListener","e","JSON","parse","result","readAsBinaryString","useDropzone","getRootProps","getInputProps","isDragActive","onClick","window","location","reload","SingleLineChart","dataLine","years","selectedYear","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","selectedYearData","width","justifyContent","handleChangeYear","Layout","collapse","isWideEnough","dataPoints","isloading","isButtonShow","barChartData","singleLineChartData","multilineChartData","dateFrom","dateTo","errorMessage","fixed","dark","expand","icon","size","fontSize","isOpen","navbar","right","active","to","flexDirection","padding","marginTop","boxShadow","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db84dbcf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBContainer, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid >\r\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.github.com/muhammadbilalqamar\" target=\"_blank\"> Data Visualization </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n}\r\n\r\nexport default FooterPage;","const getMonthName = (element) => {\r\n  let label = \"\";\r\n  if (element === \"01\") {\r\n    label = \"January\";\r\n  } else if (element === \"02\") {\r\n    label = \"Feburary\";\r\n  } else if (element === \"03\") {\r\n    label = \"March\";\r\n  } else if (element === \"04\") {\r\n    label = \"April\";\r\n  } else if (element === \"05\") {\r\n    label = \"May\";\r\n  } else if (element === \"06\") {\r\n    label = \"June\";\r\n  } else if (element === \"07\") {\r\n    label = \"July\";\r\n  } else if (element === \"08\") {\r\n    label = \"August\";\r\n  } else if (element === \"09\") {\r\n    label = \"September\";\r\n  } else if (element === \"10\") {\r\n    label = \"Octuber\";\r\n  } else if (element === \"11\") {\r\n    label = \"November\";\r\n  } else if (element === \"12\") {\r\n    label = \"December\";\r\n  }\r\n  return label;\r\n};\r\n\r\nconst convertArrayOfObjectToArray = (arr, key) => {\r\n  try {\r\n    const data = [];\r\n    for (var i = 0; i < arr.length; i++) {\r\n      data.push(arr[i][key]);\r\n    }\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst percentage = (obtain, total) => {\r\n  return ((obtain / total) * 100).toFixed(2);\r\n};\r\n\r\nexport { convertArrayOfObjectToArray, percentage, getMonthName };\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nexport default function DropDownSelections({ onChange }) {\r\n  const options = [\r\n    { value: \"LIN_monthly_var\", label: \"LIN_monthly_var\" },\r\n    { value: \"XOM_monthly_var\", label: \"XOM_monthly_var\" },\r\n    { value: \"CMCSA_monthly_var\", label: \"CMCSA_monthly_var\" },\r\n    { value: \"ABBV_monthly_var\", label: \"ABBV_monthly_var\" },\r\n    { value: \"AMD_monthly_var\", label: \"AMD_monthly_var\" },\r\n    { value: \"LLY_monthly_var\", label: \"LLY_monthly_var\" },\r\n    { value: \"PM_monthly_var\", label: \"PM_monthly_var\" },\r\n    { value: \"DIS_monthly_var\", label: \"DIS_monthly_var\" },\r\n    { value: \"COST_monthly_var\", label: \"COST_monthly_var\" },\r\n    { value: \"MS_monthly_var\", label: \"MS_monthly_var\" },\r\n    { value: \"WMT_monthly_var\", label: \"WMT_monthly_var\" },\r\n    { value: \"HD_monthly_var\", label: \"HD_monthly_var\" },\r\n    { value: \"META_monthly_var\", label: \"META_monthly_var\" },\r\n    { value: \"NKE_monthly_var\", label: \"NKE_monthly_var\" },\r\n    { value: \"UNH_monthly_var\", label: \"UNH_monthly_var\" },\r\n    { value: \"VZ_monthly_var\", label: \"VZ_monthly_var\" },\r\n    { value: \"UPS_monthly_var\", label: \"UPS_monthly_var\" },\r\n    { value: \"ABT_monthly_var\", label: \"ABT_monthly_var\" },\r\n    { value: \"NFLX_monthly_var\", label: \"NFLX_monthly_var\" },\r\n    { value: \"V_monthly_var\", label: \"V_monthly_var\" },\r\n    { value: \"ADBE_monthly_var\", label: \"ADBE_monthly_var\" },\r\n    { value: \"NVDA_monthly_var\", label: \"NVDA_monthly_var\" },\r\n    { value: \"PEP_monthly_var\", label: \"PEP_monthly_var\" },\r\n    { value: \"ORCL_monthly_var\", label: \"ORCL_monthly_var\" },\r\n    { value: \"MSFT_monthly_var\", label: \"MSFT_monthly_var\" },\r\n    { value: \"JNJ_monthly_var\", label: \"JNJ_monthly_var\" },\r\n    { value: \"AAPL_monthly_var\", label: \"AAPL_monthly_var\" },\r\n    { value: \"KO_monthly_var\", label: \"KO_monthly_var\" },\r\n    { value: \"NEE_monthly_var\", label: \"NEE_monthly_var\" },\r\n    { value: \"AVGO_monthly_var\", label: \"AVGO_monthly_var\" },\r\n    { value: \"MCD_monthly_var\", label: \"MCD_monthly_var\" },\r\n    { value: \"TXN_monthly_var\", label: \"TXN_monthly_var\" },\r\n    { value: \"DHR_monthly_var\", label: \"DHR_monthly_var\" },\r\n    { value: \"CRM_monthly_var\", label: \"CRM_monthly_var\" },\r\n    { value: \"CSCO_monthly_var\", label: \"CSCO_monthly_var\" },\r\n    { value: \"TMO_monthly_var\", label: \"TMO_monthly_var\" },\r\n    { value: \"AMZN_monthly_var\", label: \"AMZN_monthly_var\" },\r\n    { value: \"ACN_monthly_var\", label: \"ACN_monthly_var\" },\r\n    { value: \"MRK_monthly_var\", label: \"MRK_monthly_var\" },\r\n    { value: \"CVX_monthly_var\", label: \"CVX_monthly_var\" },\r\n    { value: \"PG_monthly_var\", label: \"PG_monthly_var\" },\r\n    { value: \"MA_monthly_var\", label: \"MA_monthly_var\" },\r\n  ];\r\n  const [selectedOption, setSelectedOption] = useState(options[0]);\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedOption(event.target.value);\r\n    if (onChange) {\r\n      onChange(event.target.value);\r\n    }\r\n  };\r\n  return (\r\n    <select value={selectedOption} onChange={handleChange}>\r\n      {options.map((option, index) => (\r\n        <option key={index} value={option.label}>\r\n          {option.label || \"Select an option\"}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\nimport DATA from \"../data/MonthlyVarDf.json\";\r\nimport { getMonthName } from \"../utils/functions\";\r\nimport DropDownSelections from \"./Dropdown\";\r\n\r\nclass BarChart extends React.Component {\r\n  state = {\r\n    selectedLabel: \"LIN_monthly_var\",\r\n    dataBar: null,\r\n    barChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            barPercentage: 1,\r\n            gridLines: {\r\n              display: true,\r\n              color: \"rgba(0, 0, 0, 0.1)\",\r\n            },\r\n          },\r\n        ],\r\n        yAxes: [\r\n          {\r\n            gridLines: {\r\n              display: true,\r\n              color: \"rgba(0, 0, 0, 0.1)\",\r\n            },\r\n            ticks: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { fileData } = this.props;\r\n    try {\r\n      if (fileData) {\r\n        this.updateBarChart(\"LIN_monthly_var\");\r\n      }\r\n    } catch (error) {\r\n      console.log(\"bar chart error=======\", error);\r\n    }\r\n  }\r\n\r\n  formatData = (objects, selectedLabel) => {\r\n    let tempData = [];\r\n    for (const key in objects) {\r\n      if (Object.hasOwnProperty.call(objects, key)) {\r\n        const element = objects[key];\r\n        console.log(\"element----\", element);\r\n        if (element && element.length != 0) {\r\n          const total = this.calculateSum(element, selectedLabel);\r\n          const label = key;\r\n          tempData.push({ total: total, label: getMonthName(label) });\r\n        }\r\n      }\r\n    }\r\n    return tempData;\r\n  };\r\n\r\n  calculateSum = (arr, selectedLabel) => {\r\n    if (arr) {\r\n      const sum = arr.reduce((accumulator, object) => {\r\n        return accumulator + Number(object[selectedLabel]);\r\n      }, 0);\r\n      return sum;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  handleChange = (value) => {\r\n    this.updateBarChart(value);\r\n  };\r\n\r\n  groupByDate = (data) => {\r\n    const groups = data.reduce((groups, item) => {\r\n      const date = item.Date.split(\"-\")[1];\r\n      if (!groups[date]) {\r\n        groups[date] = [];\r\n      }\r\n      groups[date].push(item);\r\n      return groups;\r\n    }, {});\r\n    return groups;\r\n  };\r\n\r\n  updateBarChart = async (key) => {\r\n    const label = key || \"LIN_monthly_var\";\r\n    const months = this.groupByDate(DATA);\r\n    const dataSets = this.formatData(months, label);\r\n    const xAxes = dataSets.map((data) => data.label);\r\n    const yAxes = dataSets.map((data) => data.total);\r\n    this.setState({\r\n      selectedLabel: label,\r\n      dataBar: {\r\n        labels: xAxes,\r\n        selectedLabel: label,\r\n        datasets: [\r\n          {\r\n            label: \"Total\",\r\n            data: yAxes,\r\n            backgroundColor: [\r\n              \"rgba(255, 134,159,0.4)\",\r\n              \"rgba(98,  182, 239,0.4)\",\r\n              \"rgba(255, 218, 128,0.4)\",\r\n              \"rgba(113, 205, 205,0.4)\",\r\n              \"rgba(170, 128, 252,0.4)\",\r\n              \"rgba(255, 177, 101,0.4)\",\r\n              \"rgba(255, 218, 128, 1)\",\r\n              \"rgba(98,  182, 239,0.4)\",\r\n              \"rgba(255, 134,159,0.4)\",\r\n              \"rgba(255, 218, 128,0.4)\",\r\n              \"rgba(170, 128, 252,0.4)\",\r\n            ],\r\n            borderWidth: 2,\r\n            borderColor: [\r\n              \"rgba(255, 134, 159, 1)\",\r\n              \"rgba(98,  182, 239, 1)\",\r\n              \"rgba(255, 218, 128, 1)\",\r\n              \"rgba(113, 205, 205, 1)\",\r\n              \"rgba(170, 128, 252, 1)\",\r\n              \"rgba(255, 218, 128, 1)\",\r\n              \"rgba(255, 134,159,0.4)\",\r\n              \"rgba(255, 134,159,0.4)\",\r\n              \"rgba(255, 134, 159, 1)\",\r\n              \"rgba(255, 134, 159, 1)\",\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { dataBar, selectedLabel } = this.state;\r\n    return (\r\n      <MDBContainer style={{ paddingBottom: 20 }}>\r\n        {dataBar && (\r\n          <>\r\n            <h3 className=\"mt-5\">{`Monthly Analysis Of ${\r\n              selectedLabel || \"LIN_monthly_var\"\r\n            }`}</h3>\r\n            <Bar\r\n              data={this.state.dataBar}\r\n              options={this.state.barChartOptions}\r\n              legend={false}\r\n              height={300}\r\n            />\r\n            <b style={{ marginRight: 20 }}>(Select Attribute)</b>\r\n          </>\r\n        )}\r\n        <DropDownSelections\r\n          onChange={(value) => {\r\n            this.handleChange(value);\r\n          }}\r\n        />\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BarChart;\r\n","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { MDBBtn } from 'mdbreact'\r\nimport \"../App.css\"\r\n\r\nfunction MyDropzone({ getFileData, fileData }) {\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        var myFile = acceptedFiles[0];\r\n        var reader = new FileReader();\r\n        reader.addEventListener('load', (e) => {\r\n            const data = JSON.parse(e.target.result);\r\n            getFileData(data)\r\n        });\r\n        reader.readAsBinaryString(myFile);\r\n    }, [])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n    return (\r\n        <>\r\n            {!fileData ?\r\n                <div className='dropzonen' {...getRootProps()} >\r\n                    <input {...getInputProps()} />\r\n                    {\r\n                        isDragActive ?\r\n                            <p>Drop that json file...</p> :\r\n                            <p>Drag 'n' drop json file here, or click to select files</p>\r\n                    }\r\n                </div>\r\n                :\r\n                <>\r\n                    <MDBBtn  className='mx-5' color='dark' onClick={() => window.location.reload()}>Reset</MDBBtn>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyDropzone;","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\nimport { getMonthName } from \"../utils/functions\";\r\nimport DATA from \"../data/MonthlyVarDf.json\";\r\nimport DropDownSelections from \"./Dropdown\";\r\n\r\nclass SingleLineChart extends React.Component {\r\n  state = {\r\n    dataLine: null,\r\n    years: null,\r\n    selectedYear: null,\r\n  };\r\n  async componentDidMount() {\r\n    const { fileData } = this.props;\r\n    try {\r\n      if (fileData) {\r\n        this.updateBarChart(\"LIN_monthly_var\", fileData);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"bar chart error=======\", error);\r\n    }\r\n  }\r\n\r\n  formatData = (objects, selectedLabel) => {\r\n    let tempData = [];\r\n    for (const key in objects) {\r\n      if (Object.hasOwnProperty.call(objects, key)) {\r\n        const element = objects[key];\r\n        if (element && element.length != 0) {\r\n          const total = this.calculateSum(element, selectedLabel);\r\n          const label = key;\r\n          tempData.push({ total: total, label: getMonthName(label) });\r\n        }\r\n      }\r\n    }\r\n    return tempData;\r\n  };\r\n\r\n  calculateSum = (arr, selectedLabel) => {\r\n    if (arr) {\r\n      const sum = arr.reduce((accumulator, object) => {\r\n        return accumulator + Number(object[selectedLabel]);\r\n      }, 0);\r\n      return sum;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  handleChange = (value) => {\r\n    const { fileData } = this.props;\r\n    this.updateBarChart(value, fileData);\r\n  };\r\n\r\n  groupByDate = (data) => {\r\n    const groups = data.reduce((groups, item) => {\r\n      const date = item.Date.split(\"-\")[1];\r\n      if (!groups[date]) {\r\n        groups[date] = [];\r\n      }\r\n      groups[date].push(item);\r\n      return groups;\r\n    }, {});\r\n    return groups;\r\n  };\r\n\r\n  updateBarChart = async (key, fileData) => {\r\n    const label = key || \"LIN_monthly_var\";\r\n    const months = this.groupByDate(fileData);\r\n    const dataSets = this.formatData(months, label);\r\n    const xAxes = dataSets.map((data) => data.label);\r\n    const yAxes = dataSets.map((data) => data.total);\r\n    this.setState({\r\n      dataLine: {\r\n        labels: xAxes,\r\n        datasets: [\r\n          {\r\n            label: \"Total\",\r\n            fill: true,\r\n            lineTension: 0.3,\r\n            backgroundColor: \"rgba(225, 204,230, .3)\",\r\n            borderColor: \"rgb(205, 130, 158)\",\r\n            borderCapStyle: \"butt\",\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: \"miter\",\r\n            pointBorderColor: \"rgb(205, 130,1 58)\",\r\n            pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n            pointBorderWidth: 10,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: yAxes,\r\n          },\r\n        ],\r\n      },\r\n      selectedYearData: label,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { years, selectedYearData, dataLine } = this.state;\r\n    return (\r\n      <MDBContainer>\r\n        <h3 className=\"mt-5\">{`Monthly Analysis Of ${\r\n          selectedYearData || \"LIN_monthly_var\"\r\n        }`}</h3>\r\n        {years && years.length > 0 && (\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"flex-start\",\r\n            }}\r\n          >\r\n            <div>\r\n              <b>Select year</b>\r\n              <select\r\n                className=\"browser-default custom-select\"\r\n                onChange={(e) => this.handleChangeYear(e.target.value)}\r\n              >\r\n                <option value={\"0\"}>Select year</option>\r\n                {years.map((item, index) => {\r\n                  return (\r\n                    <option value={item} key={index}>\r\n                      {item}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {dataLine && (\r\n          <Line data={this.state.dataLine} options={{ responsive: true }} />\r\n        )}\r\n        <DropDownSelections\r\n          onChange={(value) => {\r\n            this.handleChange(value);\r\n          }}\r\n        />\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleLineChart;\r\n","import React from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBIcon,\r\n  MDBNavbarNav,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBContainer,\r\n} from \"mdbreact\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport FooterPage from \"./footer\";\r\nimport BarChart from \"./barChart\";\r\nimport MyDropzone from \"./fileUploader\";\r\nimport data from \"../data/MonthlyVarDf.json\";\r\nimport SingleLineChart from \"./singleLineChart\";\r\n\r\nclass Layout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapse: false,\r\n      isWideEnough: false,\r\n      labels: null,\r\n      dataPoints: [0, 0],\r\n      isloading: false,\r\n      isButtonShow: true,\r\n      barChartData: null,\r\n      singleLineChartData: null,\r\n      multilineChartData: null,\r\n      dateFrom: null,\r\n      dateTo: null,\r\n      errorMessage: null,\r\n      fileData: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {}\r\n\r\n  render() {\r\n    const { fileData } = this.state;\r\n    return (\r\n      <div>\r\n        <header>\r\n          <Router>\r\n            <MDBNavbar color=\"bg-primary\" fixed=\"top\" dark expand=\"md\">\r\n              <MDBNavbarBrand href=\"/\">\r\n                <MDBIcon\r\n                  icon=\"gem\"\r\n                  size=\"2x\"\r\n                  onClick={() => window.location.reload()}\r\n                >\r\n                  <b style={{ fontSize: \"30px\" }}>Data Visualization</b>\r\n                </MDBIcon>\r\n              </MDBNavbarBrand>\r\n              {!this.state.isWideEnough && (\r\n                <MDBNavbarToggler onClick={this.onClick} />\r\n              )}\r\n              <MDBCollapse isOpen={this.state.collapse} navbar>\r\n                <MDBNavbarNav right>\r\n                  <MDBNavItem active>\r\n                    <MDBNavLink to=\"#\" onClick={() => window.location.reload()}>\r\n                      Dashboard\r\n                    </MDBNavLink>\r\n                  </MDBNavItem>\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBNavbar>\r\n          </Router>\r\n        </header>\r\n\r\n        <main\r\n          style={{\r\n            display: \"flex\",\r\n            height: \"100vh\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <div style={{ padding: 10, marginTop: 70 }}>\r\n            <MDBContainer className=\"text-center my-5\">\r\n              <MyDropzone\r\n                getFileData={(data) => this.setState({ fileData: data })}\r\n                fileData={this.state.fileData}\r\n              />\r\n\r\n              {/* BAR CHART RENDERING */}\r\n              {fileData && (\r\n                <div\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    boxShadow:\r\n                      \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\",\r\n                  }}\r\n                >\r\n                  {<BarChart fileData={fileData} />}\r\n                </div>\r\n              )}\r\n\r\n              {/* SINGLE LINE CHART RENDERING */}\r\n              {fileData && (\r\n                <div\r\n                  style={{\r\n                    boxShadow:\r\n                      \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\",\r\n                  }}\r\n                >\r\n                  {<SingleLineChart fileData={fileData} />}\r\n                </div>\r\n              )}\r\n            </MDBContainer>\r\n          </div>\r\n          <FooterPage />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport Layout from \"./Components/layout\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n   \r\n\r\n    }\r\n  }\r\n  async componentDidMount() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//  FOR BOOTSTRAP LINKS\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}